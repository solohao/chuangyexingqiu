version: '3.8'

services:
  # Nginx反向代理
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ../frontend/dist:/usr/share/nginx/html
    depends_on:
      - joyagent-backend
      - genie-tool
      - genie-client
    restart: unless-stopped

  # JoyAgent Java后端
  joyagent-backend:
    build:
      context: ../backend/joyagent-core
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - DATABASE_URL=jdbc:postgresql://postgres:5432/startup_planet
      - DATABASE_USERNAME=startup_user
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python工具服务
  genie-tool:
    build:
      context: ../backend/genie-tool
      dockerfile: Dockerfile
    ports:
      - "1601:1601"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - FILE_SAVE_PATH=/app/data/files
      - SQLITE_DB_PATH=/app/data/autobots.db
    volumes:
      - tool_data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1601/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python客户端服务
  genie-client:
    build:
      context: ../backend/genie-client
      dockerfile: Dockerfile
    ports:
      - "1602:1602"
    environment:
      - JOYAGENT_BACKEND_URL=http://joyagent-backend:8080
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1602/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL数据库
  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=startup_planet
      - POSTGRES_USER=startup_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U startup_user -d startup_planet"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  app_logs:
  app_data:
  tool_data:

networks:
  default:
    name: startup_planet_network